services:
  # Node 服务，用于构建和运行 Nest 应用
  node:
    image: node:18.20.5 # 使用 Node 官方镜像
    container_name: sso-nest
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app  # 将当前目录中的 app 文件夹挂载到容器中的 /usr/src/app
    command: bash -c "npm config set registry https://registry.npmmirror.com/ && npm i -g pnpm && pnpm i && npm run deploy"  # 安装依赖、构建和启动 NestJS 服务
    environment:
      - MYSQL_HOST=mysql  # MySQL 主机名，使用 Docker 网络中的服务名称
      - MYSQL_PORT=3306  # MySQL 默认端口
      - MYSQL_USER=root  # MySQL 用户
      - MYSQL_PASSWORD=123456  # MySQL 密码
      - MYSQL_DB=sso  # MySQL 数据库名称
    depends_on:
      - mysql  # 确保 Node 服务在 MySQL 服务之后启动
    networks:
      - app-network  # 使用自定义网络
    ports:
      - "3000:3000"  # 映射 Node 服务端口

  # MySQL 服务
  mysql:
    image: mysql # 使用 MySQL 5.7 官方镜像
    container_name: sso-mysql
    environment:
      MYSQL_ROOT_PASSWORD: 123456  # MySQL root 密码
      MYSQL_DATABASE: sso  # 默认数据库
    ports:
      - "3306:3306"  # 映射 MySQL 端口
    volumes:
      - ../.cache:/var/lib/mysql  # 使用持久化卷存储数据
    networks:
      - app-network  # 使用自定义网络

# 定义卷，用于持久化 MySQL 数据
volumes:
  mysql-data:

# 定义自定义网络，用于容器之间的通信
networks:
  app-network:
    driver: bridge
